#include<bits/stdc++.h>
using namespace std;
 
typedef long long ll;
typedef vector< int > vi;
typedef vector<ll> vl;
typedef pair<long long,long long> pii;
 
#define endl '\n'
#define PB push_back
#define eb emplace_back
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define rall(a) (a).rbegin(),(a).rend()
 
#define MOD 100003
 
#define mem(a,b) memset(a, b, sizeof(a) )
#define sqr(a) ((a) * (a))
 
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
 
ll gcd ( ll a, ll b ){    return __gcd ( a, b );}
ll lcm ( ll a, ll b ){    return a * ( b / gcd ( a, b ) );}
 
const int N = 2e5 + 123;
ll tree[N * 4];
ll hotel[N], group[N];
 
void build( ll node, ll start, ll end ){
    if( start == end ){
        tree[node] = hotel[start];
        return ;
    }
 
    ll l = node * 2;
    ll r = (node * 2) + 1;
    ll mid = (start + end) / 2; 
    build( l, start, mid);
    build( r, mid + 1, end);
 
    tree[node] = max(tree[l], tree[r]);
}
 
int query( ll node, ll start, ll end, ll i ){
    if( start == end ){
        return start;
    }
 
    ll l = node * 2;
    ll r = (node * 2) + 1;
    ll mid = (start + end) / 2;
    if( i <= tree[l] ){
        return query( l, start, mid, i);
    }else{
        return query( r, mid + 1, end, i);
    }
}
 
void update( ll node, ll start, ll end, ll i , ll newvalue ){
    if (start > i || end < i) return;
    if( start == end ){
        tree[node] = newvalue;
        return;
    }

    ll l = node * 2;
    ll r = (node * 2) + 1;
    ll mid = (start + end) / 2;
 
    update( l, start, mid, i, newvalue);    
    update( r, mid + 1, end, i, newvalue);
 
    tree[node] = max(tree[l], tree[r]);
}
 
void solve(int cs) {
    ll n, m;
    cin >> n >> m;
 
    for( int i = 1; i <= n; i++ ){
        cin >> hotel[i];
    }
 
    for( int i = 1; i <= m; i++ ){
        cin >> group[i];
    }
    build(1, 1, n );
 
    for( int i = 1; i <= m; i++ ){
        ll m = group[i];
 
        if( tree[1] < m ) cout << 0 << " ";
        else{
            ll idx = query(1, 1, n, group[i]);
            hotel[idx] -= m;
            m = hotel[idx];
            cout << idx << " ";
            update(1, 1, n, idx, m);
        }
    }
}
int main() {
 
    int t = 1, cs = 1;
    //cin >> t;
 
    while(t--)
    {
        solve(cs++);
    }
    return 0;
}
