#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<long long> vi;
typedef vector<ll> vl;
typedef pair<long long,long long> pii;

#define endl '\n'
#define PB push_back
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define rall(a) (a).rbegin(),(a).rend()

#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define sqr(a) ((a) * (a))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);


ll gcd ( ll a, ll b ){    return __gcd ( a, b );}
ll lcm ( ll a, ll b ){    return a * ( b / gcd ( a, b ) );}

const long long Max = 2e6+10;
const long long base = 331;
const long long Mod = 1e9+7;

ll pw[Max], Hash[Max];

void pre_power(){
    pw[0] = 1;
    for(int i=1; i<Max; i++)
        pw[i] = (pw[i-1]*base) %Mod;
}

void get_hash(string s){
    ll hash_val = 0;
    for(int i=0; i<s.size(); i++){
        hash_val = (hash_val*base + (s[i]-'a'+1)) %Mod;
        Hash[i+1] = hash_val;
    }
}

ll SubStringHash(int l, int r){
    return ((Hash[r] - Hash[l-1]*pw[r-l+1]) %Mod + Mod) %Mod;
}

void solve(long long cs)
{
    string s, s1;
    cin >> s >> s1;
    get_hash(s1);

    if( s1.size() > s.size() )
    {
        cout << "Case " << cs << ": " << 0 << endl;
        return;
    }

    long long sOfSize = SubStringHash(1, s1.size());
    //cout << sOfSize << endl;

    memset(Hash, 0, sizeof(Hash));
    //long long s1OfSize = SubStringHash(1, s1.size());
    get_hash(s);

    long long ans = 0;
    //if( sOfSize == s1OfSize )ans++;

    for( long long i = s1.size(); i <= s.size(); i++ )
    {
        if( SubStringHash((i - s1.size() + 1),i ) == sOfSize )
        {
            ans++;
        }
    }
    
    cout << "Case " << cs << ": " << ans << endl;
}
int main()
{
    long long t = 1,cs = 0;
    cin >> t;
    pre_power();

    while(t--)
    {
        solve(++cs);
    }
    return 0;
} 
