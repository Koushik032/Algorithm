#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector< int > vi;
typedef vector<ll> vl;
typedef pair<long long,long long> pii;

#define endl '\n'
#define PB push_back
#define eb emplace_back
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define rall(a) (a).rbegin(),(a).rend()

#define MOD 100003

#define mem(a,b) memset(a, b, sizeof(a) )
#define sqr(a) ((a) * (a))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

ll gcd ( ll a, ll b ){    return __gcd ( a, b );}
ll lcm ( ll a, ll b ){    return a * ( b / gcd ( a, b ) );}

const int N = 2e5 + 123;
ll tree[N * 4];
ll arr[N];

void build( int node, int start, int end ){
    if( start == end ){
        tree[node] = arr[start];
        return ;
    }

    int l = node * 2;
    int r = (node * 2) + 1;
    int mid = (start + end) / 2; 
    build( l, start, mid);
    build( r, mid + 1, end);

    tree[node] = tree[l] + tree[r];
}

int query( int node, int start, int end, int i, int j ){
    if( start >= i and j >= end ){
        return tree[node];
    }

    if( j < start or i > end )
        return 0;

    int l = node * 2;
    int r = (node * 2) + 1;
    int mid = (start + end) / 2; 
    int val1 = query( l, start, mid, i, j);
    int val2 = query( r, mid + 1, end, i, j);

    return val1 + val2;
}

void update( int node, int start, int end, int i , int newvalue ){
    if( start == end and i == end ){
        tree[node] = newvalue;
        return;
    }

    if( i < start or i > end )
        return;

    int l = node * 2;
    int r = (node * 2) + 1;
    int mid = (start + end) / 2; 
    update( l, start, mid, i, newvalue);
    update( r, mid + 1, end, i, newvalue);

    tree[node] = tree[l] + tree[r];
}

void solve(int cs) {
    int n, q;
    cin >> n >> q;

    for( int i = 0; i < n; i++ ){
        cin >> arr[i];
    }

    build(1, 0, n - 1);

    cout << "Case " << cs << ":" << endl;

    while( q-- ){
        int k;
        cin >> k;

        if( k == 1 ){
            int i;
            cin >> i;
            cout << query(1, 0, n - 1, i, i) << endl;
            update(1, 0, n - 1, i, 0);
        }else if( k == 2 ){
            int i , val;
            cin >> i >> val;

            int ans = query(1, 0, n - 1, i, i);
            update(1, 0, n - 1, i, ans + val );
        }else{
            int i , val;
            cin >> i >> val;

            cout << query( 1, 0, n - 1, i, val) << endl;
        }
    }
}
int main() {

    int t = 1, cs = 1;
    cin >> t;

    while(t--)
    {
        solve(cs++);
    }
    return 0;
}
